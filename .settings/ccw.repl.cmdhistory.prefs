cmdhistory=["(push argmap)" "(pushgp argmap)" "(pushgp argmap-simple)" "break" "(break)" "(pushgp argmap-ultra)" "(pushgp argmap-ultra \:max-generations 2000)" "(pushgp argmap-ultra)" "(pushgp argmap-simple)" "(pushgp argmap-ultra)" "(pushgp argmap-simple)" "(pushgp argmap-ultra)" "(pushgp argmap-ultra \:max-generations 10000)" "(pushgp argmap-ultra)" "(pushgp argmap-simple)" "(pushgp argmap-ultra)" "in-file" "(in-file)" "(println in-file)" "(println data1)" "(pushgp argmap-ultra)" "(pushgp argmap-simple)" "(println data1)" "(pushgp argmap-simple)" "(println data1)" "(println data)" "(println 'data)" "(println \:data)" "(pushgp argmap-ultra)" "(println data1)" "(pushgp argmap-ultra)" "(partition 10 data1)" "(println (partition 10 data1))" "(println (partition 10 (data1)))" "(println (partition 10 (range 100)))" "(partition 10 (range 100))" "(partition 2 (range 100))" "(partition 2 (data1))" "(partition 2 data1)" "(train 10)" "(println data2)" "(train 10)" "(println data2)" "(train 10)" "(println data2)" "(train 10)" "(println data2)" "(train 3)" "(pushgp argmap-simple)" "(train 3)" "(println data2)" "(drop 2 data2)" "(subvec 2 data2)" "(subvec data2 2)" "(subvec data2 1 2)" "(subvec data2 0 2)" "(println train-data)" "(train 10 5)" "(print-ln data1)" "(train 10 5)" "(drop data data-vec)" "(drop 3 data-vec)" "(train 5 5)" "data1" "(train 5 5)" "(train 5)" "train-data" "data-vec" "train-data" "(filter [1 3 5 2] [2 8 5 0 1])" "(filter [1 3 5 2] [2 8 5 0])" "(filter [1 3 5] [2 8 5 0])" "(filter even? [1 2 3 4 5 6 7 8 9])" "(filter (\= [4 5 6]) [1 2 3 4 5 6 7 8 9])" "(filter [4 5 6] [1 2 3 4 5 6 7 8 9])" "(filter '[4 5 6] [1 2 3 4 5 6 7 8 9])" "(remove [4 5 6] [1 2 3 4 5 6 7 8 9])" "(remove (\=\= [4 5 6]) [1 2 3 4 5 6 7 8 9])" "(remove  ([4 5 6]) [1 2 3 4 5 6 7 8 9])" "(remove ([4 5 6]) [1 2 3 4 5 6 7 8 9])" "(remove (set [4 5 6]) [1 2 3 4 5 6 7 8 9])" "(train 5 5)" "(train-data)" "(print-ln train-data)" "(println train-data)" "'train-data" "test-data" "train-data" "(pushgp argmap-ultra)" "(train 5 5)" "(pushgp argmap-temp)" "\:program" "(\:program)" "(\:program in)" "(\:program 'in)" "clojush.individual" "(clojush.individual)" "(clojush.individual.individual)" "clojush.individual.individual" "i" "(pushgp argmap-temp) ->" "(pushgp argmap-temp) -> (test-data)" "\=> (pushgp argmap-temp -> test-data)" "(pushgp argmap-temp -> test-data)" "(test-data) -> (pushgp argmap)" "best-program" "(best-program)" "(train 5 5)" "(pushgp argmap-train)" "(train 5 5)" "\:program" "(\:program)" "(pushgp argmap-train)" "\:program" "(\:program)" "\:mutation-probability" "(\:mutation-probability)" "do (\:mutation-probability)" "(do (\:mutation-probability))" "(train 10 5)" "(pushgp argmap-train)" "\#clojush.individual.individual" "(\#clojush.individual.individual)" "clojush.individual.individual" "(clojush.individual.individual)" "(clojush.individual.individual \:program)" "(individual)" "clojush.individual" "(clojush.individual)" "(clojush.individual program)" "(individual)" "individual" "(train 10 5)" "(pushgp argmap-train)" "individual" "(individual)" "\:program" "(\:program)" "(1 \:program)" "(val \:program)" "val program" "(pushgp argmap-train)" "argmap-train" "(def program (pushgp argmap))" "(def program (pushgp argmap-train))" "program" "(program \:program)" "(\:program program)" "(train 5 5)" "best-program" "(train 5 5)" "best-program" "(train 5 5)" "best-program" "(run-push best-program)" "(run-push (best-program) (make-push-state))" "(run-push '(best-program) (make-push-state))" "(run-push (best-program) (make-push-state))" "(let [in 1800](run-push (best-program) (make-push-state)))" "(run-push '(1 2 integer_add)(make-push-state))" "(run-push (best-program) (make-push-state))" "(run-push best-program (make-push-state))" "(run-push 'best-program (make-push-state))" "in" "(in)" "(run-push 'best-program (make-push-state))" "(run-push (in 9.612809634340573 in float_mult float_div float_ex float_sub float_sin float_sin) (make-push-state))" "(let [in 1800] (run-push (in 9.612809634340573 in float_mult float_div float_ex float_sub float_sin float_sin) (make-push-state)))" "(run-push '(1.0 2.0 integer_add)(make-push-state))" "(run-push '(1.0 2.0 float_add)(make-push-state))" "(run-push '(1.0 2.0 float_mult)(make-push-state))" "(let [in 1800] (run-push '(in 9.612809634340573 in float_mult float_div float_ex float_sub float_sin float_sin) (make-push-state)))" "(let [in 1800.0] (run-push '((eval in) 9.612809634340573 (eval in) float_mult float_div float_ex float_sub float_sin float_sin)\\n                           9.612809634340573 (eval in) float_mult float_div float_ex float_sub float_sin float_sin) (make-push-state))" "(eval x)" "(eval 1)" "1" "'(eval 1)" "(let [in 1800] (run-push '(1800.0 9.612809634340573 1800.0 float_mult float_div float_ex float_sub float_sin float_sin) (make-push-state)))" "(let [in 1800] (run-push (map eval (best-program)) (make-push-state)))" "(let [in 1800] (run-push '(1800.0 9.612809634340573 1800.0 float_mult float_div float_ex float_sub float_sin float_sin) (make-push-state)))" "'(+ x 2 3 8 1 x)" "(let [x 2] (+ x 2 3 8 1 x))" "(let [x 2] '(+ x 2 3 8 1 x))" "(let [x 2] (eval x '(+ x 2 3 8 1 x)))" "(let [x 2] (map eval x '(+ x 2 3 8 1 x)))" "(let [x 2] (map (eval x) '(+ x 2 3 8 1 x)))" "(let [x 2] (map '(eval x) '(+ x 2 3 8 1 x)))" "(let [x 2] (map (eval '(+ x 2 3 8 1 x))))" "(let [x 2] (map eval '(+ x 2 3 8 1 x)))" "(train 5 5)" "(pushgp argmap-train)" "best-program" "(best-program)" "(best-program 1800.0)" "(let [in 1800] (run-push '(1800.0 9.612809634340573 1800.0 float_mult float_div float_ex float_sub float_sin float_sin) (make-push-state)))" "(let [in 1800] (run-push '(9.612809634340573 1800.0 float_mult float_div float_ex float_sub float_sin float_sin) (make-push-state)))" "\\"in\\"" "(train 5 5)" "(best-program)" "best-program" "(replace (in 1800.0) '(in 12 in 2 3))" "(replace (\\"in\\" 1800.0) '(in 12 in 2 3))" "(replace (in 1800.0) '(in 12 in 2 3))" "(replace (in 1800.0) (in 12 in 2 3))" "(replace {in 1800.0} '(in 12 in 2 3))" "(replace {in 1800.0} '('in 12 in 2 3))" "(replace '{in 1800.0} '(in 12 in 2 3))" "(replace (in 1800.0) best-program)" "(replace '{in 1800.0} best-program)" "(define test-program (replace '{in 1800.0} best-program))" "(def test-program (replace '{in 1800.0} best-program))" "(run-push best-program (make-push-state))" "(run-push test-program (make-push-state))" "(train 5 5)" "(test-program)" "(test-program 1800.0)" "test-program 1800.0" "test-program" "(let x 1800.0 (replace '{l x} (l 8 1 4 9)))" "(let [x 1800.0] (replace '{l x} (l 8 1 4 9)))" "(let [x 1800.0] (replace '{l x} '(l 8 1 4 9)))" "best-program" "(train 10 10)" "best-program" "(test-program 1.0)" "(test-program 5.0)" "(train 10 10)" "best-program" "(test-program 1.0)" "best-program" "(train 10 10)" "best-program" "(test-program 1.0)" "(train 10 10)" "best-program" "(train 10 10)" "best-program" "(test-program 1.0)" "(replace '{in 1.0} best-program)" "(train 10 10)" "(test-program 1.0)" "(train 10 10)" "(test-program 1.0)" "(run-push best-program (make-push-state))" "(run-push test-program (make-push-state))" "(run-push (test-program 1.0) (make-push-state))" "(run-push (test-program 10.0) (make-push-state))" "(run-push (test-program 100.0) (make-push-state))" "(train 10 10)" "(test-program 1.0)" "(train 10 10)" "(test-program 1.0)" "(test-program 10.0)" "(test-program 10098.0)" "(train 100 100)" "(train 20 20)" "(test-program 10098.0)" "(best-program)" "best-program" "(argmap-train)" "(argmap-train \:program)" "(train 20 20)" "(argmap-train \:individual)" "(argmap-train \:best-individual)" "(argmap-train \:parent)" "best-program" "(train 20 20)" "best-program" "(train 100 100)" "(test-program 1978)" "(train 100 100)" "test-results" "(test-results)" "map first test-data" "(map first test-data)" "(map test-program (map first test-data))" "(test-program [1.0])" "(test-program 1.0)" "best-program" "(test-program 1.0)" "(train 2 2)" "(train 100 100)" "best-program" "(train 100 100)" "best-program" "test-results" "(test-results)" "(map test-program (map first test-data))" "(time (map test-program (map first test-data)))" "(map first test-data)" "(map last test-data)" "(train 100 100)" "(train 10 10)" "(test-results)" "test-" "(test-)" "(map last train-data)" "(map last test-data)" "(train 10 10)" "test-results" "(test-results)" "test-error" "(test-error)" "(train 10 10)" "(test-results)" "test-error" "(test-error)" "(test-results)" "(map last test-data)" "(map last test-results)" "(train 10 10)" "(test-error)" "(map last test-results)" "(test-results)" "test-results" "test-program" "test-results" "(test-program)" "(map test-program (first test-data))" "(first test-data)" "(map first test-data)" "(map test-program (map first test-data))" "(flatten (map test-program (map first test-data)))" "(train 50 50)" "Fail" "(Fail)" "(train 20 20)" "(train 10 10)" "(train 5 5)" "(test-program)" "\#_(def test-error (map - (map last test-data) test-results))" "(def test-error (map - (map last test-data) test-results))" "\#_(def test-error (map - (map last test-data) test-results))" "(flatten (map test-program (first test-data)))" "(flatten (map test-program (first 'test-data)))" "(flatten (map 'test-program (first test-data)))" "(flatten (map test-program (first test-data)))" "(map - (map last test-data) (flatten (map test-program (first test-data))))" "last test-data" "(last test-data)" "(map last test-data)" "(test-data)" "test-data" "test-program" "(test-program)" "(test-program x)" "(test-program 1)" "(best-program)" "best-program" "(test-program 3.4)" "(test-program 100)" "(test-program 202002)" "(test-program 0.1)" "(test-program 0)" "(test-program -1)" "(train 10 10)" "(best-program)" "best-program" "(test-program 1)" "(test-program 1.0)" "(test-program 2.0)" "(test-program 1.0)" "(test-program 5.0)" "(test-program 115.0)" "(test-program 112.2)" "(train 10 10)" "(test-program 1.0)" "(test-program 4.0)" "(test-program 10.0)" "train-data" "test-data" "(map test-program (map first test-data))" "(flatten (map test-program (map first test-data)))" "(filter identity (map test-program (map first test-data)))" "(map - (map last test-data) (filter identity (map test-program (map first test-data))))" "(map last test-data)" "(map - (map last test-data) (filter identity (map test-program (map first test-data))))" "(filter identity (map test-program (map first test-data)))" "(flatten (filter identity (map test-program (map first test-data))))" "(map - (map last test-data)(flatten (filter identity (map test-program (map first test-data)))))" "(vec (flatten (filter identity (map test-program (map first test-data)))))" "(map vec (flatten (filter identity (map test-program (map first test-data)))))" "(map flatten (flatten (filter identity (map test-program (map first test-data)))))" "(flatten (flatten (filter identity (map test-program (map first test-data)))))" "(filter identity (map test-program (map first test-data)))" "(vec (filter identity (map test-program (map first test-data))))" "(into [] (filter identity (map test-program (map first test-data))))" "(into [] '(filter identity (map test-program (map first test-data))))" "(map test-program (map first test-data))" "(vec (map test-program (map first test-data)))" "(into [] map test-program (map first test-data))" "(vec (map first test-data))" "(map test-program (vec (map first test-data)))" "(vec (map test-program (vec (map first test-data))))" "(train 20 20)" "(map test-program (map first test-data))" "(vec '(\:float (run-push (replace {'in x} best-program) (make-push-state))))" "(vec (\:float (run-push (replace {'in x} best-program) (make-push-state))))" "(vec (\:float (run-push (replace {'in 1} best-program) (make-push-state))))" "(vec (map (let [x range 20])) (\:float (run-push (replace {'in x} best-program) (make-push-state))))" "(vec (map (let [x (range 20)])) (\:float (run-push (replace {'in x} best-program) (make-push-state))))" "(vec (map (let [x (range 20)] (\:float (run-push (replace {'in x} best-program) (make-push-state))))))" "(vec (map let [x (range 20)] (\:float (run-push (replace {'in x} best-program) (make-push-state)))))" "(def x (range 10)(vec (\:float (run-push (replace {'in x} best-program) (make-push-state)))))" "(def x (range 10)) (vec (\:float (run-push (replace {'in x} best-program) (make-push-state))))" "(def x (range 10)) (vec (map (\:float (run-push (replace {'in x} best-program) (make-push-state)))) x)" "(def x (range 10)) (vec (map (\:float (run-push (replace {'in x} best-program) (make-push-state))) x))" "(def x (range 10)) (vec (\:float (map (run-push (replace {'in x} best-program) (make-push-state))) x))" "(def x (range 10)) (vec (\:float (map (run-push (replace {'in x} best-program) (make-push-state))x)))" "(train 5 5)" "(test-program 1.1)" "(map test-program (map first test-data))" "(map test-program (vec (map first test-data)))" "(map test-program (vec (flatten (map first test-data))))" "(map test-program (flatten (map first test-data)))" "(flatten (map test-program (map first test-data)))" "(vec (flatten (map test-program (map first test-data))))" "(map - (map last test-data) (vec (flatten (map test-program (map first test-data)))))" "(vec (map - (map last test-data) (vec (flatten (map test-program (map first test-data))))))" "(train 5 5)" "(map - (map last test-data) (flatten (map test-program (map first test-data))))" "(train 5 5)" "(test-error)" "(train 5 5)" "(test-error)" "(train 50 50)" "(test-error)" "(train 100 100)" "(test-error)" "(data1)" "data1" "(map last data1)" "(map - (map last data1) (flatten (map test-program (map first data1))))" "(train 200 0)" "(train 200 1)" "(train 10 10)" "(test-all-error)" "(test-error)" "(map / (map - (map last data1) (flatten (map test-program (map first data1))))) (map last data1)" "(map - (map last test-data) (flatten (map test-program (map first test-data))))" "(map / (map - (map last test-data) (flatten (map test-program (map first test-data)))) (map last test-data))" "(train 10 10)" "(test-all-error)" "(map * (map / (map - (map last data1) (flatten (map test-program (map first data1)))) (map last data1)) 100)" "(map / (map - (map last data1) (flatten (map test-program (map first data1)))) (map last data1))" "(map / (map last data1) (map - (map last data1) (flatten (map test-program (map first data1)))))" "(map *(map / (map last data1) (map - (map last data1) (flatten (map test-program (map first data1))))))" "(map * (map / (map last data1) (map abs ((map - (map last data1) (flatten (map test-program (map first data1)))))) 100))" "(map * (map / (map last data1) (map abs (map - (map last data1) (flatten (map test-program (map first data1))))) 100))" "(map abs (map - (map last data1) (flatten (map test-program (map first data1)))))" "(map / (map last data) (map abs (map - (map last data1) (flatten (map test-program (map first data1))))))" "(map / (map last data1) (map abs (map - (map last data1) (flatten (map test-program (map first data1))))))" "(map * (map / (map last data1) (map abs (map - (map last data1) (flatten (map test-program (map first data1)))))) 100)" "(map * (vec (map / (map last data1) (map abs (map - (map last data1) (flatten (map test-program (map first data1))))))) 100)" "(map * (vec (map / (map last data1) (map abs (map - (map last data1) (flatten (map test-program (map first data1))))))) (100))" "(map * (map / (map last data1) (map abs (map - (map last data1) (flatten (map test-program (map first data1)))))) 100)" "(map * data1 100)" " (* data1 100)" "(map * (nth data1) 100)" "(map * (map nth data1) 100)" "(map * (map nth data1 (count data1)) 100)" "(for [x data1] (* x 100))" "(for [x (data1)] (* x 100))" "(map * (data1) 100)" "(map * data1 100)" "(map * 'data1 100)" "(map * (data1 100))" "(map * (* data1 100))" "(* data1 100)" "(* (data1) 100)" "data1" "(data1)" "(map * data1 100)" "(map \#(* 100 %) [1 2 3 4 5])" "(map \#(* 100 %) data1)" "(map \#(* 100 %) (data1))" "(map \#(* 100 %) data1)" "(map \#(* 100 %) (map last data1))" "best-program" "other" "(other)" "(train 10 10)" "(test-all-error)" "test-all-error" "(test-error)" "(map / (map last data1) (map abs ((map - (map last data1) (flatten (map test-program (map first data1)))))))" "(map last data1) (map abs ((map - (map last data1) (flatten (map test-program (map first data1))))))" "(map abs ((map - (map last data1) (flatten (map test-program (map first data1))))))" "(map abs [100 -2 3 -1 99])" "(map abs (vec ((map - (map last data1) (flatten (map test-program (map first data1)))))))" "(vec ((map - (map last data1) (flatten (map test-program (map first data1))))))" "(map - (map last data1) (flatten (map test-program (map first data1))))" "(vec (map - (map last data1) (flatten (map test-program (map first data1)))))" "(map abs (vec (map - (map last data1) (flatten (map test-program (map first data1))))))" "(map \#(* 100 %) (map / (map last data1) (map abs (vec (map - (map last data1) (flatten (map test-program (map first data1))))))))" "(map abs (vec (map - (map last data1) (flatten (map test-program (map first data1))))))" "(map / (map abs (vec (map - (map last data1) (flatten (map test-program (map first data1)))))) (map last data1))" "(map last data)" "(map last data1)" "(map / (map abs (vec (map - (map last data1) (flatten (map test-program (map first data1)))))) (map last data1))" "(map / (map last data1) (map abs (vec (map - (map last data1) (flatten (map test-program (map first data1)))))))" "(train 10 10)" "(test-all-error)" "(reduce + vals)" "(/ (reduce + data1) (count data1))" "(reduce + data1) (count data1)" "(reduce + data1)" "(reduce data1)" "(reduce + (map last data1))" "(/ (reduce + (map last data1) (count (map last data1))))" "(/ (reduce + (map last data1)) (count (map last data1)))" "(train 10 10)" "(test-all-error)" "(reduce + ((map last data1) (map abs (vec (map - (map last data1) (flatten (map test-program (map first data1))))))))" "(reduce + (vec ((map last data1) (map abs (vec (map - (map last data1) (flatten (map test-program (map first data1)))))))))" "(vec ((map last data1) (map abs (vec (map - (map last data1) (flatten (map test-program (map first data1))))))))" "((map last data1) (map abs (vec (map - (map last data1) (flatten (map test-program (map first data1)))))))" "((map abs (vec (map - (map last data1) (flatten (map test-program (map first data1)))))))" "((map last data1) (map abs (vec (map - (map last data1) (flatten (map test-program (map first data1)))))))" "(flatten (map test-program (map first data1)))" "(map - (map last data1) (flatten (map test-program (map first data1))))" "(vec (map - (map last data1) (flatten (map test-program (map first data1)))))" "(map abs (vec (map - (map last data1) (flatten (map test-program (map first data1))))))" "(count (map abs (vec (map - (map last data1) (flatten (map test-program (map first data1)))))))" "(reduce + (map abs (vec (map - (map last data1) (flatten (map test-program (map first data1)))))))" "(/ (reduce + (map abs (vec (map - (map last data1) (flatten (map test-program (map first data1))))))) (count (map abs (vec (map - (map last data1) (flatten (map test-program (map first data1))))))))" "(train 10 10)" "(train 20 20)" "(train 10 10)" "(test-all-error)" "(train 10 10)" "(train 15 15)" "(train 10 10)" "(test-all-error)" "(test-error)" "(train 15 15)" "(train 182 79)" "(train 10 10)" "(test-error)" "(test-all-error)" "(train 20 20)" "(test-error)" "(train 182 79)" "(train-data)" "train-data" "(train 182 79)" "(test-error)" "(test-data)" "test-data" "(test-all-error)" "(train 182 79)" "(train 10 10)" "(test-error)" "(test-error-all)" "(flatten (map test-program (first test-data)))" "(flatten (map test-program (map first test-data)))" "(map first test-data)" "(vec (flatten (concat (map test-program (map first test-data)))))" "(zipmap (map test-program) (map first test-data))" "(zipmap (map first test-data) (map test-program (map first test-data)))" "(zipmap (map first test-data) (flatten (map test-program (map first test-data))))" "(zipmap (map first data1) (flatten (map test-program (map first data1))))" "(train 182 79)" "(test-error-all)" "(test-error)" "(train 25 25)" "(test-error)" "(test-error-all)" "(output-data-all)" "(with-open [out-file (io/writer \\"out-file.csv\\")]\\r\\n  (csv/write-csv out-file\\r\\n                 [(output-data-all)]))" "(vec (map vec(output-data-all)))" "(with-open [out-file (io/writer \\"out-file.csv\\")]\\r\\n  (csv/write-csv out-file\\r\\n                 (vec (map vec(output-data-all)))))" "(best-program)" "best-program" "(train 100 100)" "(train 10 10)" "(best-progra)" "(best-program)" "(def best-program '((in float_cos float_cos float_ex float_cbrt float_tan -2.1739873900350055 float_add -4.833692145825005 float_ex float_mult float_tan float_tan float_tan float_tan in float_sin float_sub in float_cos float_sqrt float_tan float_add float_tan -20.923774445860182 in float_sqrt float_tan float_sub float_add float_add -23.538084447894796 float_add 1.3393880946198085 float_ex float_sub float_sqrt float_sin in float_cbrt float_cos float_sin float_cos float_log float_sin float_sub float_sin float_tan float_tan)))" "(test-error-all)" "(def best-program ((in float_cos float_cos float_ex float_cbrt float_tan -2.1739873900350055 float_add -4.833692145825005 float_ex float_mult float_tan float_tan float_tan float_tan in float_sin float_sub in float_cos float_sqrt float_tan float_add float_tan -20.923774445860182 in float_sqrt float_tan float_sub float_add float_add -23.538084447894796 float_add 1.3393880946198085 float_ex float_sub float_sqrt float_sin in float_cbrt float_cos float_sin float_cos float_log float_sin float_sub float_sin float_tan float_tan)))" "(defn [] best-program ((in float_cos float_cos float_ex float_cbrt float_tan -2.1739873900350055 float_add -4.833692145825005 float_ex float_mult float_tan float_tan float_tan float_tan in float_sin float_sub in float_cos float_sqrt float_tan float_add float_tan -20.923774445860182 in float_sqrt float_tan float_sub float_add float_add -23.538084447894796 float_add 1.3393880946198085 float_ex float_sub float_sqrt float_sin in float_cbrt float_cos float_sin float_cos float_log float_sin float_sub float_sin float_tan float_tan)))" "(defn [] best-program '((in float_cos float_cos float_ex float_cbrt float_tan -2.1739873900350055 float_add -4.833692145825005 float_ex float_mult float_tan float_tan float_tan float_tan in float_sin float_sub in float_cos float_sqrt float_tan float_add float_tan -20.923774445860182 in float_sqrt float_tan float_sub float_add float_add -23.538084447894796 float_add 1.3393880946198085 float_ex float_sub float_sqrt float_sin in float_cbrt float_cos float_sin float_cos float_log float_sin float_sub float_sin float_tan float_tan)))" "(def best-program '((in float_cos float_cos float_ex float_cbrt float_tan -2.1739873900350055 float_add -4.833692145825005 float_ex float_mult float_tan float_tan float_tan float_tan in float_sin float_sub in float_cos float_sqrt float_tan float_add float_tan -20.923774445860182 in float_sqrt float_tan float_sub float_add float_add -23.538084447894796 float_add 1.3393880946198085 float_ex float_sub float_sqrt float_sin in float_cbrt float_cos float_sin float_cos float_log float_sin float_sub float_sin float_tan float_tan)))" "best-program" "(def best-program '(in float_cos float_cos float_ex float_cbrt float_tan -2.1739873900350055 float_add -4.833692145825005 float_ex float_mult float_tan float_tan float_tan float_tan in float_sin float_sub in float_cos float_sqrt float_tan float_add float_tan -20.923774445860182 in float_sqrt float_tan float_sub float_add float_add -23.538084447894796 float_add 1.3393880946198085 float_ex float_sub float_sqrt float_sin in float_cbrt float_cos float_sin float_cos float_log float_sin float_sub float_sin float_tan float_tan))" "best-program" "(test-error-all)" "(test-error)" "(with-open [out-file (io/writer \\"out-file2.csv\\")]\\r\\n  (csv/write-csv out-file\\r\\n                 (vec (map vec (output-data-all)))))" "(train 10 10)" "(train 30 30)" "(with-open [out-file (io/writer \\"out-file2.csv\\")]\\r\\n  (csv/write-csv out-file\\r\\n                 (vec (map vec (output-data-all)))))" "(train 60 60)" "(train 30 30)" "(with-open [out-file (io/writer \\"out-file2.csv\\")]\\r\\n  (csv/write-csv out-file\\r\\n                 (vec (map vec (output-data-all)))))" "(train 30 30)" "(with-open [out-file (io/writer \\"out-file2.csv\\")]\\r\\n  (csv/write-csv out-file\\r\\n                 (vec (map vec (output-data-all)))))" "(train 30 30)" "(with-open [out-file (io/writer \\"out-file2.csv\\")]\\r\\n  (csv/write-csv out-file\\r\\n                 (vec (map vec (output-data-all)))))" "(train 30 30)" "(def best-program (-7.2810737922891064 -16.592578541392385 float_sin float_div float_div float_tan float_tan float_cos float_sqrt float_ex float_sin in float_sqrt float_sin float_sin float_sin float_sin float_sqrt float_sin float_mult float_tan float_tan float_tan 1.905420410743711 float_cbrt float_div float_tan float_sin -5.537283407645102 float_tan float_log float_tan float_tan float_tan float_tan float_add float_tan))" "(def best-program '(-7.2810737922891064 -16.592578541392385 float_sin float_div float_div float_tan float_tan float_cos float_sqrt float_ex float_sin in float_sqrt float_sin float_sin float_sin float_sin float_sqrt float_sin float_mult float_tan float_tan float_tan 1.905420410743711 float_cbrt float_div float_tan float_sin -5.537283407645102 float_tan float_log float_tan float_tan float_tan float_tan float_add float_tan))" "(with-open [out-file (io/writer \\"out-file2.csv\\")]\\r\\n  (csv/write-csv out-file\\r\\n                 (vec (map vec (output-data-all)))))" "(test-program 2015.0)" "(train 50 50)" "(with-open [out-file (io/writer \\"out-file2.csv\\")]\\r\\n  (csv/write-csv out-file\\r\\n                 (vec (map vec (output-data-all)))))" "(train 100 100)" "(train 5 5)" "(train)" "(train 5 5)" "(with-open [out-file (io/writer \\"out-file2.csv\\")]\\r\\n  (csv/write-csv out-file\\r\\n                 (vec (map vec (output-data-all)))))" "(train 5 5)" "(time (train 5 5))" "(with-open [out-file (io/writer \\"out-file2.csv\\")]\\r\\n  (csv/write-csv out-file\\r\\n                 (vec (map vec (output-data-all)))))" "(time (train 182 79))" "(train 20 10)" "(train 10 10)" "(save-output)" "(train 2 2)" "(output-data-all)" "(test-error-all)" "(save-output)" "(train 20 20)" "(train [20 20])" "train 20 20" "(train)" "(train 20 20)" "(test-program [best-program])" "(test-program best-program)" "(test-program 10)" "(test-error)" "test-error" "best-program" "(best-program)" "'(best-program)" "'best-program" "('best-program)" "(test-program [\:program best])" "(test-program (\:program best))" "(\:program best)" "(\:program)" "(println \\"Best program\:\\" (pr-str (not-lazy (\:program best))))" "best" "(train 5 5)" "(best-program)" "(test-program [best-program])" "(test-error)" "(test-error-all)" "(output-data-all)" "(train 100 100)" "(train 10 10)" "(train 120 120)" "(train 10 10)" "(train 1 1)" "(train 10 10)" "(train 1 1)" "(train 100 100)" "(train 10 10)" "(run-push '(8 3 integer_add))" "(run-push '(8 3 integer_add) (make-push-state))" "(run-push '(8 3 integer_add) (make-push-state) true)" "(train 10 10)"]
eclipse.preferences.version=1
